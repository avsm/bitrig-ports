$OpenBSD$
--- lib/VMCore/Module.cpp.orig	Sat Oct 20 22:41:39 2012
+++ lib/VMCore/Module.cpp	Sat Oct 20 22:41:16 2012
@@ -286,6 +286,34 @@ Constant *Module::getOrInsertGlobal(StringRef Name, Ty
   return GV;
 }
 
+/// getOrInsertLinkerPrivate - Look up the specified linker private in the
+/// module symbol table.
+///   1. If it does not exist, add a declaration of the linker private variable
+///      and return it.
+///   2. Else, the variable exists but has the wrong type: return the function
+///      with a constantexpr cast to the right type.
+///   3. Finally, if the existing global is the correct declaration, return
+///      the existing linker private variable.
+Constant *Module::getOrInsertLinkerPrivate(StringRef Name, Type *Ty) {
+  // See if we have a definition for the specified global already.
+  GlobalVariable *GV = dyn_cast_or_null<GlobalVariable>(getNamedValue(Name));
+  if (GV == 0) {
+    // Nope, add it
+    GlobalVariable *New =
+      new GlobalVariable(*this, Ty, false, GlobalVariable::LinkerPrivateLinkage,
+                         0, Name);
+     return New;                    // Return the new declaration.
+  }
+
+  // If the variable exists but has the wrong type, return a bitcast to the
+  // right type.
+  if (GV->getType() != PointerType::getUnqual(Ty))
+    return ConstantExpr::getBitCast(GV, PointerType::getUnqual(Ty));
+
+  // Otherwise, we just found the existing function or a prototype.
+  return GV;
+}
+
 //===----------------------------------------------------------------------===//
 // Methods for easy access to the global variables in the module.
 //
